import numpy as np
import matplotlib.pyplot as plt


def f(t, y):
    return 1 + (y / t) + (y / t) ** 2


def exact_solution(t):
    return t * np.tan(np.log(t))


def euler_method(f, t0, y0, h, t_end):
    t_values = np.arange(t0, t_end + h, h)
    y_values = np.zeros_like(t_values)
    y_values[0] = y0

    for i in range(1, len(t_values)):
        y_values[i] = y_values[i - 1] + h * f(t_values[i - 1], y_values[i - 1])

    return t_values, y_values


t0 = 1.0
y0 = 0.0
h = 0.1
t_end = 2.0

t_vals, y_euler = euler_method(f, t0, y0, h, t_end)
y_exact = exact_solution(t_vals)

plt.plot(t_vals, y_euler, 'o-', label="Euler's method", color='blue')
plt.plot(t_vals, y_exact, 'r--', label="Exact solution", linewidth=2)
plt.xlabel('t')
plt.ylabel('y')
plt.title("Euler's Method vs. Exact Solution")
plt.legend()
plt.grid(True)
plt.show()

for t, y_num, y_true in zip(t_vals, y_euler, y_exact):
    print(f"t = {t:.1f}, Euler = {y_num:.5f}, Exact = {y_true:.5f}, Error = {abs(y_num - y_true):.5f}")
