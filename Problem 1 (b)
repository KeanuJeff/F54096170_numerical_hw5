import numpy as np
import matplotlib.pyplot as plt


def f(t, y):
    return 1 + (y / t) + (y / t) ** 2

def exact_solution(t):
    return t * np.tan(np.log(t))

def df(t, y):
    term1 = -y / t ** 2 - 2 * y ** 2 / t ** 3
    df_dy = 1 / t + 2 * y / t ** 2
    f_val = f(t, y)
    return term1 + df_dy * f_val


def taylor_order2(f, df, t0, y0, h, t_end):
    t_values = np.arange(t0, t_end + h, h)
    y_values = np.zeros_like(t_values)
    y_values[0] = y0

    for i in range(1, len(t_values)):
        t_n = t_values[i - 1]
        y_n = y_values[i - 1]
        y_values[i] = y_n + h * f(t_n, y_n) + 0.5 * h ** 2 * df(t_n, y_n)

    return t_values, y_values


t0 = 1.0
y0 = 0.0
h = 0.1
t_end = 2.0
t_vals_taylor, y_taylor = taylor_order2(f, df, t0, y0, h, t_end)
y_exact_taylor = exact_solution(t_vals_taylor)


plt.plot(t_vals_taylor, y_taylor, 'o-', label="Taylor Order 2", color='green')
plt.plot(t_vals_taylor, y_exact_taylor, 'r--', label="Exact solution", linewidth=2)
plt.xlabel('t')
plt.ylabel('y')
plt.title("Taylor Method (Order 2) vs. Exact Solution")
plt.legend()
plt.grid(True)
plt.show()


for t, y_num, y_true in zip(t_vals_taylor, y_taylor, y_exact_taylor):
    print(f"t = {t:.1f}, Taylor = {y_num:.5f}, Exact = {y_true:.5f}, Error = {abs(y_num - y_true):.5f}")
