import numpy as np
import matplotlib.pyplot as plt


def f(t, u):
    u1, u2 = u
    du1 = 9*u1 + 24*u2 + 5*np.cos(t) - (1/3)*np.sin(t)
    du2 = -24*u1 - 52*u2 - 9*np.cos(t) + (1/3)*np.sin(t)
    return np.array([du1, du2])

def exact_u1(t):
    return 2*np.exp(-3*t) - np.exp(-39*t) + (1/3)*np.cos(t)

def exact_u2(t):
    return -np.exp(-3*t) + 2*np.exp(-39*t) - (1/3)*np.cos(t)


def runge_kutta_4(f, t0, u0, h, t_end):
    t_values = np.arange(t0, t_end + h, h)
    u_values = np.zeros((len(t_values), 2))
    u_values[0] = u0

    for i in range(1, len(t_values)):
        t = t_values[i-1]
        u = u_values[i-1]

        k1 = f(t, u)
        k2 = f(t + h/2, u + h/2 * k1)
        k3 = f(t + h/2, u + h/2 * k2)
        k4 = f(t + h, u + h * k3)

        u_values[i] = u + h/6 * (k1 + 2*k2 + 2*k3 + k4)

    return t_values, u_values


t0 = 0
u0 = [4/3, 2/3]
t_end = 1


for h in [0.05, 0.1]:
    t_vals, u_vals = runge_kutta_4(f, t0, u0, h, t_end)
    u1_exact = exact_u1(t_vals)
    u2_exact = exact_u2(t_vals)

    
    plt.figure(figsize=(10, 4))
    plt.subplot(1, 2, 1)
    plt.plot(t_vals, u_vals[:, 0], 'bo-', label="RK4 u1")
    plt.plot(t_vals, u1_exact, 'r--', label="Exact u1")
    plt.title(f"u1(t) with h={h}")
    plt.legend()
    plt.grid(True)

    plt.subplot(1, 2, 2)
    plt.plot(t_vals, u_vals[:, 1], 'go-', label="RK4 u2")
    plt.plot(t_vals, u2_exact, 'r--', label="Exact u2")
    plt.title(f"u2(t) with h={h}")
    plt.legend()
    plt.grid(True)

    plt.tight_layout()
    plt.show()

   
    print(f"--- Results for h = {h} ---")
    for t, u1_num, u2_num, u1_true, u2_true in zip(t_vals, u_vals[:,0], u_vals[:,1], u1_exact, u2_exact):
        err1 = abs(u1_num - u1_true)
        err2 = abs(u2_num - u2_true)
        print(f"t = {t:.2f}, u1 = {u1_num:.5f}, u1_exact = {u1_true:.5f}, err = {err1:.2e} | "
              f"u2 = {u2_num:.5f}, u2_exact = {u2_true:.5f}, err = {err2:.2e}")
